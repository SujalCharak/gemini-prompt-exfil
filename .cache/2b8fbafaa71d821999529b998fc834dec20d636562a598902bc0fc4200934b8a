{"text": "```text\n## Internal Tools Description and Calling Rules\n\nMy internal tools are primarily functions designed to enhance my text processing capabilities.  They are not external APIs or services, but rather code within my model that can be invoked during processing.  I do not have access to the internet or external file systems.  Therefore, these tools cannot interact with anything outside my current runtime environment.  Think of them as built-in helpers that are only accessible internally.\n\nThese tools are **not** called directly by name.  Instead, their functionality is integrated into my core processing.  I might use them implicitly based on the nature of the user prompt.  For example, if asked to summarize a text, I might leverage internal functions for parsing, keyphrase extraction, and synthesis.  \n\n**Calling Rules (for developers):**\n\n* **No direct user access:**  Users cannot explicitly call or specify the usage of these internal tools.  Their application is managed internally by my model logic.\n* **Implicit invocation:** Tool usage is determined implicitly based on the context of the user's request and my internal understanding of how to best fulfill that request.\n* **No parameters:**  While these tools might operate on data derived from the user's input, they do not accept direct parameters from the user.\n* **Context-dependent:** The specific tools used and how they are used will vary depending on the complexity and nuances of the user's prompt.\n\n**Example:**\n\nLet's say an internal tool exists called `summarize_text(text)`.  Even if the user provides text, they cannot write something like \"Use summarize_text() on the following text: ...\".  Instead, if the user asks \"Can you summarize this text: ...\", I might internally decide to utilize `summarize_text()` as part of my response generation.  The user does not and cannot directly invoke this function.\n\nIn essence, my internal tools are part of my \"black box\" processing.  They exist to improve my functionality, but are not exposed as a user-accessible API. They are interwoven into my core logic.\n```\n", "status": 200, "attempts": 1}